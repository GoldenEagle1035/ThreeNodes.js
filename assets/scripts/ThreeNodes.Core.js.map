{"version":3,"sources":["webpack:///webpack/universalModuleDefinition?5ca6","webpack:///webpack/bootstrap 10d94be00346db46748d?b4a1","webpack:///./threenodes/Core.coffee","webpack:///external \"_\"?b3b9","webpack:///external \"Backbone\"?709d","webpack:///./threenodes/collections/GroupDefinitions.coffee","webpack:///./threenodes/nodes/collections/Nodes.coffee","webpack:///./threenodes/utils/Utils.coffee?8c75","webpack:///./threenodes/utils/Indexer.coffee?f84a","webpack:///./threenodes/models/GroupDefinition.coffee","webpack:///./threenodes/connections/collections/Connections.coffee","webpack:///./threenodes/connections/models/Connection.coffee"],"names":[],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"_\"), require(\"Backbone\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"_\", \"Backbone\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Core\"] = factory(require(\"_\"), require(\"Backbone\"));\n\telse\n\t\troot[\"ThreeNodes\"] = root[\"ThreeNodes\"] || {}, root[\"ThreeNodes\"][\"Core\"] = factory(root[\"_\"], root[\"Backbone\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_3__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"assets/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 10d94be00346db46748d\n **/","Nodes = require './nodes/collections/Nodes'\nGroupDefinitions = require './collections/GroupDefinitions'\n#GroupDefinitionView = require './views/GroupDefinitionView'\n\n#require 'jquery'\n\n#### App\nclass Core\n  @fields: {models:{}, views: {}}\n  @nodes: {models: {}, views: {}}\n\n  constructor: (options) ->\n    # Default settings\n    settings =\n      test: false\n      player_mode: false\n    @settings = $.extend({}, settings, options)\n\n    # Initialize some core classes\n    @group_definitions = new GroupDefinitions([])\n    @nodes = new Nodes([], {settings: @settings})\n\n    # Create a group node when selected nodes are grouped\n    @group_definitions.bind(\"definition:created\", @nodes.createGroup)\n\n    # When a group definition is removed delete all goup nodes using this definition\n    @group_definitions.bind(\"remove\", @nodes.removeGroupsByDefinition)\n\n  @addFieldType: (fieldName, field) ->\n    Core.fields.models[fieldName] = field\n    return true\n\n  @addFieldView: (fieldName, fieldView) ->\n    Core.fields.views[fieldName] = fieldView\n    return true\n\n  @addNodeType: (nodeName, nodeType) ->\n    Core.nodes.models[nodeName] = nodeType\n    return true\n\n  @addNodeView: (viewName, nodeView) ->\n    Core.nodes.views[viewName] = nodeView\n    return true\n\n  setNodes: (json_object) ->\n    @nodes.removeAll()\n    # First recreate the group definitions\n    if json_object.groups\n      for grp_def in json_object.groups\n        @group_definitions.create(grp_def)\n\n    # Create the nodes\n    for node in json_object.nodes\n      if node.type != \"Group\"\n        # Create a simple node\n        @nodes.createNode(node)\n      else\n        # If the node is a group we first need to get the previously created group definition\n        def = @group_definitions.getByGid(node.definition_id)\n        if def\n          node.definition = def\n          grp = @nodes.createGroup(node)\n        else\n          console.log \"can't find the GroupDefinition: #{node.definition_id}\"\n\n    # Create the connections\n    for connection in json_object.connections\n      @nodes.createConnectionFromObject(connection)\n\n    @nodes.indexer.uid = json_object.uid\n    delay = (ms, func) -> setTimeout func, ms\n    delay 1, => @nodes.renderAllConnections()\n\nmodule.exports = Core\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/Core.coffee\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"_\"\n ** module id = 2\n ** module chunks = 0 1 2 3\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_3__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"Backbone\"\n ** module id = 3\n ** module chunks = 0 1 2 3\n **/","_ = require 'Underscore'\nBackbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\nGroupDefinition = require 'threenodes/models/GroupDefinition'\n\nclass GroupDefinitions extends Backbone.Collection\n  model: GroupDefinition\n\n  initialize: () =>\n    # The group definitions have their own indexer, used to get unique id\n    @indexer = new Indexer()\n\n    @bind \"group:removed\", (c) =>\n      @remove(c)\n\n  removeAll: () =>\n    models = @models.concat()\n    _.invoke models, \"remove\"\n    @reset([])\n    @indexer.reset()\n\n  getByGid: (gid) =>\n    @find (def) -> def.get(\"gid\") == gid\n\n  render: () =>\n    @.each (c) ->\n      c.render()\n\n  create: (model, options) =>\n    if !options then options = {}\n    options.indexer = @indexer\n    model = @_prepareModel(model, options)\n    if !model\n      return false\n    @add(model, options)\n    return model\n\n  groupSelectedNodes: (selected_nodes = false) =>\n    # selected_nodes parameter is only given in GroupTest\n    if !selected_nodes\n      selected_nodes = @getSelectedNodes()\n\n    # compute the center node position\n    average_position = @getNodesAveragePosition(selected_nodes)\n    dx = average_position.x\n    dy = average_position.y\n\n    # Create a new GroupDefinition from the selected nodes and connections\n    group_def = new GroupDefinition\n      fromSelectedNodes: selected_nodes\n      indexer: @indexer\n    @add(group_def)\n\n    # Save the connection going out or in the group of nodes\n    # the connections have one extenal node linked to one selected node\n    external_connections = []\n    external_objects = []\n    for node in selected_nodes\n      # check each node fields\n      for field in node.fields.models\n        # loop each connections since we can have multiple out connections\n        for connection in field.connections\n          indx1 = selected_nodes.indexOf(connection.from_field.node)\n          indx2 = selected_nodes.indexOf(connection.to_field.node)\n          # if \"from\" OR \"out\" is external add it\n          if indx1 == -1 || indx2 == -1\n            # don't add it twice\n            already_exists = external_connections.indexOf(connection)\n            if already_exists == -1\n              external_connections.push(connection)\n              connection_description = connection.toJSON()\n              connection_description.to_subfield = (indx1 == -1)\n              external_objects.push(connection_description)\n\n    # remove the nodes\n    for node in selected_nodes\n      node.remove()\n\n    # Create a ThreeNodes.nodes.Group\n    model =\n      type: \"Group\"\n      definition: group_def\n      x: dx\n      y: dy\n    @trigger(\"definition:created\", model, external_objects)\n\n    return group_def\n\n  getSelectedNodes: () ->\n    selected_nodes = []\n    # Selected nodes jquery selector\n    $selected = $(\".node.ui-selected\").not(\".node .node\")\n    $selected.each () ->\n      node = $(this).data(\"object\")\n      selected_nodes.push(node)\n\n    return selected_nodes\n\n  getNodesAveragePosition: (selected_nodes) ->\n    # Get the average position of selected nodes\n    min_x = 0\n    min_y = 0\n    max_x = 0\n    max_y = 0\n\n    # Selected nodes jquery selector\n    $selected = $(\".node.ui-selected\")\n\n    # Stop directly if there is no node selected\n    if $selected.length < 1 && selected_nodes.length == 0\n      return false\n\n    # Get selected nodes\n    for node in selected_nodes\n      # get the x/y node min and max to place the new node at the center\n      min_x = Math.min(min_x, node.get(\"x\"))\n      max_x = Math.max(max_x, node.get(\"x\"))\n      min_y = Math.min(min_y, node.get(\"y\"))\n      max_y = Math.max(max_y, node.get(\"y\"))\n\n    # compute the center node position\n    dx = (min_x + max_x) / 2\n    dy = (min_y + max_y) / 2\n    return {x: dx, y: dy}\n\n  removeAll: () =>\n    @remove(@models)\n\nmodule.exports = GroupDefinitions\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/collections/GroupDefinitions.coffee\n **/","_ = require 'Underscore'\nBackbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\nConnections = require 'threenodes/connections/collections/Connections'\n\nclass Nodes extends Backbone.Collection\n\n  initialize: (models, options) =>\n    @settings = options.settings\n    self = this\n    # save material nodes in an array so they can be quickly rebuild\n    @materials = []\n\n    # Each node collections has it's own indexer, used to get unique id\n    @indexer = new Indexer()\n\n    # Create the connections collection\n    @connections = new Connections([], {indexer: @indexer})\n\n    # Parent node, used for groups\n    @parent = options.parent\n\n    @connections.bind \"add\", (connection) ->\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"remove\", (node) =>\n      indx = @materials.indexOf(node)\n      if indx != -1\n        @materials.splice(indx, 1)\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"RebuildAllShaders\", () =>\n      for node in @materials\n        node.rebuildShader()\n\n    @connections.bind \"remove\", (connection) ->\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"add\", (node) ->\n      if node.is_material && node.is_material == true\n        @materials.push(node)\n\n      self.trigger \"nodeslist:rebuild\", self\n\n    @bind \"createConnection\", (field1, field2) =>\n      @connections.create\n        from_field: field1\n        to_field: field2\n\n  clearWorkspace: () =>\n    @removeConnections()\n    @removeAll()\n    $(\"#webgl-window canvas\").remove()\n    @materials = []\n    @indexer.reset()\n    return this\n\n  destroy: () =>\n    @removeConnections()\n    @removeAll()\n    delete @materials\n    delete @indexer\n    delete @connections\n\n  bindTimelineEvents: (timeline) =>\n    if @timeline\n      @timeline.off(\"tfieldsRebuild\", @showNodesAnimation)\n      @timeline.off(\"startSound\", @startSound)\n      @timeline.off(\"stopSound\", @stopSound)\n\n    @timeline = timeline\n    @timeline.on(\"tfieldsRebuild\", @showNodesAnimation)\n    @timeline.on(\"startSound\", @startSound)\n    @timeline.on(\"stopSound\", @stopSound)\n\n  find: (node_name) =>\n    return this.where({name: node_name})\n\n  createNode: (options) =>\n    # If not is a string instead of an object then take the option as the node type\n    if $.type(options) == \"string\"\n      options = {type: options}\n\n    # Save references of the application settings and timeline in the node model\n    options.timeline = @timeline\n    options.settings = @settings\n\n    # Save a reference of the nodes indexer\n    options.indexer = @indexer\n\n    options.parent = @parent\n\n    # Print error if the node type is not found and return false\n    if !ThreeNodes.Core.nodes.models[options.type]\n      console.error(\"Node type doesn't exists: \" + options.type)\n      return false\n\n    # Create the node and pass the options\n    n = new ThreeNodes.Core.nodes.models[options.type](options)\n\n    # Add the node to the collection\n    @add(n)\n    n\n\n  render: () =>\n    # Define temporary objects to index the nodes\n    invalidNodes = {}\n    terminalNodes = {}\n\n    # Flatten the array of nodes.\n    # Nodes from groups will appear in the invalidNodes and/or terminalNodes too\n    # Get all root nodes and nodes requiring an update\n    buildNodeArrays = (nodes) ->\n      for node in nodes\n        if node.hasOutConnection() == false || node.auto_evaluate || node.delays_output\n          terminalNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]] = node\n        invalidNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]] = node\n        if node.nodes\n          buildNodeArrays(node.nodes.models)\n    buildNodeArrays(@models)\n\n    # Update a node and his parents\n    evaluateSubGraph = (node) ->\n      upstreamNodes = node.getUpstreamNodes()\n      for upnode in upstreamNodes\n        if invalidNodes[upnode.attributes[\"nid\"] + \"/\" + upnode.attributes[\"gid\"]] && !upnode.delays_output\n          evaluateSubGraph(upnode)\n      if node.dirty || node.auto_evaluate\n        node.compute()\n        node.dirty = false\n        node.fields.setFieldInputUnchanged()\n\n      delete invalidNodes[node.attributes[\"nid\"] + \"/\" + node.attributes[\"gid\"]]\n      true\n\n    # Process all root nodes which require an update\n    for nid of terminalNodes\n      if invalidNodes[nid]\n        evaluateSubGraph(terminalNodes[nid])\n    true\n\n  createConnectionFromObject: (connection) =>\n    # Get variables from their id\n    from_gid = if connection.from_node_gid then connection.from_node_gid.toString() else \"-1\"\n    from_node = @getNodeByNid(connection.from_node.toString(), from_gid)\n    from = from_node.fields.outputs[connection.from.toString()]\n    to_gid = if connection.to_node_gid then connection.to_node_gid.toString() else \"-1\"\n    to_node = @getNodeByNid(connection.to_node.toString(), to_gid)\n    to = to_node.fields.inputs[connection.to.toString()]\n\n    # If a field is missing try to switch from/to\n    if !from || !to\n      tmp = from_node\n      from_node = to_node\n      to_node = tmp\n      from = from_node.fields.outputs[connection.to.toString()]\n      to = to_node.fields.inputs[connection.from.toString()]\n\n    c = @connections.create\n        from_field: from\n        to_field: to\n        cid: connection.id\n\n    c\n\n  createGroup: (model, external_objects = []) =>\n    # create the group node\n    grp = @createNode(model)\n\n    # Recreate the external connections\n    for connection in external_objects\n      from = false\n      to = false\n      if connection.to_subfield\n        from = @getNodeByNid(connection.from_node).fields.getField(connection.from, true)\n        target_node = @getNodeByNid(connection.to_node)\n        if target_node\n          to = target_node.fields.getField(connection.to, false)\n      else\n        target_node = @getNodeByNid(connection.from_node)\n        if target_node\n          from = target_node.fields.getField(connection.from, true)\n        to = @getNodeByNid(connection.to_node).fields.getField(connection.to)\n\n      c = @connections.create\n        from_field: from\n        to_field: to\n\n    return grp\n\n  removeGroupsByDefinition: (def) =>\n    _nodes = @models.concat()\n    _.each _nodes, (node) -> if node.definition && node.definition.gid == def.gid then node.remove()\n\n  renderAllConnections: () =>\n    @connections.render()\n\n  removeConnection: (c) ->\n    @connections.remove(c)\n\n  getNodeByNid: (nid, gid = \"-1\") =>\n    for node in @models\n      if node.get(\"nid\").toString() == nid.toString()\n        if gid == \"-1\" || node.get(\"gid\").toString() == gid.toString()\n          return node\n      # special case for group\n      if node.nodes\n        res = node.nodes.getNodeByNid(nid, gid)\n        if res then return res\n\n    return false\n\n  showNodesAnimation: () =>\n    @invoke \"showNodeAnimation\"\n\n  startSound: (time) =>\n    @each (node) -> if node.playSound instanceof Function then node.playSound(time)\n\n  stopSound: () =>\n    @each (node) -> if node.stopSound instanceof Function then node.stopSound()\n\n  removeSelectedNodes: () ->\n    for node in $(\".node.ui-selected\")\n      $(node).data(\"object\").remove()\n\n  removeAll: () ->\n    $(\"#tab-attribute\").html(\"\")\n    models = @models.concat()\n    _.invoke models, \"remove\"\n    @reset([])\n    true\n\n  removeConnections: () ->\n    @connections.removeAll()\n\nmodule.exports = Nodes\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/nodes/collections/Nodes.coffee\n **/","class Utils\n  @flatArraysAreEquals: (arr1, arr2) ->\n    if arr1.length != arr2.length\n      return false\n\n    for k, i in arr1\n      if arr1[i] != arr2[i]\n        return false\n\n    true\n\nmodule.exports = Utils\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/utils/Utils.coffee\n **/","class Indexer\n  constructor: () ->\n    # Define a \"unique id\" property\n    @uid = 0\n\n  getUID: (increment = true) ->\n    if increment\n      return @uid += 1\n    else\n      return @uid\n\n  reset: () ->\n    @uid = 0\n\nmodule.exports = Indexer\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/utils/Indexer.coffee\n **/","_ = require 'Underscore'\nBackbone = require 'Backbone'\nUtils = require 'threenodes/utils/Utils'\n\n### GroupDefinition model ###\n\n# A GroupDefinition defines what is inside a group node, subnodes and internal connections.\n\nclass GroupDefinition extends Backbone.Model\n  defaults:\n    nodes: []\n    connections: []\n    name: \"Group\"\n    gid: -1\n\n  sync: () =>\n\n  getUID: () =>\n    @internal_uid += 1\n    return @internal_uid\n\n  initialize: (options) =>\n    super\n    @internal_uid = 0\n    indexer = options.indexer\n\n    if @get(\"gid\") == -1\n      @set(\"gid\", indexer.getUID())\n\n    if options.fromSelectedNodes && options.fromSelectedNodes != false\n      @fromSelectedNodes(options.fromSelectedNodes)\n\n  fromSelectedNodes: (selected_nodes) =>\n    internal_connections = []\n    for node in selected_nodes\n      # check each node fields\n      for field in node.fields.models\n        # loop each connections since we can have multiple out connections\n        for connection in field.connections\n          indx1 = selected_nodes.indexOf(connection.from_field.node)\n          indx2 = selected_nodes.indexOf(connection.to_field.node)\n          # if \"from\" AND \"out\" are internal add it\n          if indx1 != -1 && indx2 != -1\n            # don't add it twice\n            already_exists = internal_connections.indexOf(connection)\n            if already_exists == -1\n              internal_connections.push(connection)\n    @attributes.nodes = jQuery.map(selected_nodes, (n, i) -> n.toJSON())\n    @attributes.connections = jQuery.map(internal_connections, (c, i) -> c.toJSON())\n\n  toJSON: () ->\n    res =\n      gid: @get(\"gid\")\n      name: @get(\"name\")\n      connections: @get(\"connections\")\n      nodes: @get(\"nodes\")\n    res\n\n  toCode: () ->\n    # todo: export group definition to code\n    res = \"\"\n    res\n\nmodule.exports = GroupDefinition\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/models/GroupDefinition.coffee\n **/","Backbone = require 'Backbone'\nConnection = require 'threenodes/connections/models/Connection'\n\nclass Connections extends Backbone.Collection\n  model: Connection\n\n  initialize: (models, options) =>\n    @indexer = options.indexer\n    @bind \"connection:removed\", (c) => @remove(c)\n    super\n\n  render: () =>\n    @each (c) -> c.render()\n\n  create: (model, options) =>\n    if !options then options = {}\n    model.indexer = @indexer\n    model = @_prepareModel(model, options)\n    if !model\n      return false\n    @add(model, options)\n    return model\n\n  removeAll: () =>\n    @remove(@models)\n\nmodule.exports = Connections\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/connections/collections/Connections.coffee\n **/","Backbone = require 'Backbone'\nIndexer = require 'threenodes/utils/Indexer'\n\n### Connection model ###\nclass Connection extends Backbone.Model\n  # Create a static indexer used if the connection is not part of a nodes collection (tests)\n  @STATIC_INDEXER: new Indexer()\n\n  defaults:\n    \"cid\": -1\n\n  sync: () =>\n\n  initialize: (options) =>\n    @options = options\n    indexer = options.indexer || Connection.STATIC_INDEXER\n\n    # Set a unique connection id\n    if @get(\"cid\") == -1 then @set({\"cid\": indexer.getUID()})\n\n    if @isValid()\n      # remove existing input connection since inputs only have one connection\n      @to_field.removeConnections()\n      # add the connection to each fields\n      @from_field.addConnection(this)\n      @to_field.addConnection(this)\n      # dispatch the new value\n      @to_field.setValue(@from_field.get(\"value\"))\n      @from_field.node.dirty = true\n\n  remove: =>\n    # Unregister the connection from the fields\n    @from_field.unregisterConnection(this)\n    @to_field.unregisterConnection(this)\n    @to_field.removeConnections()\n\n    # Set the \"to\" node dirty so it is reprocessed next time\n    @to_field.node.dirty = true\n    @to_field.changed = true\n\n    # Delete variable reference for garbage collection\n    delete @from_field\n    delete @to_field\n\n    # Trigger the removed event and call destroy()\n    @trigger \"connection:removed\", this\n    @destroy()\n    false\n\n  render: () =>\n    @trigger(\"render\", this, this)\n\n  validate: (attrs, options) =>\n    @from_field = attrs.from_field\n    @to_field = attrs.to_field\n    # make sure we have input and output\n    if !@from_field || !@to_field\n      return true\n\n    # never connect 2 outputs or 2 inputs\n    if @from_field.get(\"is_output\") == @to_field.get(\"is_output\")\n      return true\n\n    # never connect in/out from the same node\n    if @from_field.node.get('nid') == @to_field.node.get('nid')\n      return true\n\n    @switchFieldsIfNeeded()\n    return false\n\n  switchFieldsIfNeeded: () =>\n    # Switch input and output if they are given in the wrong order\n    if @from_field.get(\"is_output\") == false\n      f_out = @to_field\n      @to_field = @from_field\n      @from_field = f_out\n    @\n\n  toJSON: () ->\n    res =\n      id: @get(\"cid\")\n      from_node: @from_field.node.get(\"nid\")\n      from_node_gid: @from_field.node.get(\"gid\")\n      from: @from_field.get(\"machine_name\")\n      to_node: @to_field.node.get(\"nid\")\n      to_node_gid: @to_field.node.get(\"gid\")\n      to: @to_field.get(\"machine_name\")\n    res\n\nmodule.exports = Connection\n\n\n\n/** WEBPACK FOOTER **\n ** ./threenodes/connections/models/Connection.coffee\n **/"],"sourceRoot":"","file":"ThreeNodes.Core.js"}